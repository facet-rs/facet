---
source: facet-macros-emit/tests/codegen/mod.rs
expression: "expand(r#\"\n        #[derive(Facet)]\n        #[repr(C)]\n        struct Blah {\n            foo: u32,\n            bar: String,\n        }\n        \"#)"
---
static BLAH_SHAPE: &'static ::facet::Shape = <Blah as ::facet::Facet>::SHAPE;
#[automatically_derived]
unsafe impl<'__facet> ::facet::Facet<'__facet> for Blah {
    const SHAPE: &'static ::facet::Shape = &const {
        let fields: &'static [::facet::Field] = &const {
            [
                {
                    ::facet::Field::builder()
                        .name("foo")
                        .shape(::facet::shape_of(&|s: &Blah| &s.foo))
                        .offset(::core::mem::offset_of!(Blah, foo))
                        .build()
                },
                {
                    ::facet::Field::builder()
                        .name("bar")
                        .shape(::facet::shape_of(&|s: &Blah| &s.bar))
                        .offset(::core::mem::offset_of!(Blah, bar))
                        .build()
                },
            ]
        };
        ::facet::Shape::builder_for_sized::<Self>()
            .vtable({
                let mut vtable =
                    ::facet::value_vtable!(Self, |f, _opts| ::core::fmt::Write::write_str(
                        f, "Blah"
                    ));
                vtable
            })
            .type_identifier("Blah")
            .ty(::facet::Type::User(::facet::UserType::Struct(
                ::facet::StructType::builder()
                    .repr(::facet::Repr::c())
                    .kind(::facet::StructKind::Struct)
                    .fields(fields)
                    .build(),
            )))
            .build()
    };
}
